{
	"openapi": "3.0.3",
	"info": {
		"title": "Philanthropy Data Commons API",
		"description": "An API for a common data platform to make the process of submitting data requests to funders less burdensome for organizations seeking grants.",
		"version": "0.11.0"
	},
	"components": {
		"parameters": {
			"authenticationIdParam": {
				"name": "authenticationId",
				"description": "The authentication ID associated with the desired user.",
				"in": "query",
				"required": false,
				"schema": {
					"type": "string"
				}
			},
			"pageParam": {
				"schema": {
					"type": "integer",
					"minimum": 1,
					"default": 1
				},
				"in": "query",
				"name": "_page",
				"required": false,
				"description": "The page number being retrieved."
			},
			"countParam": {
				"schema": {
					"type": "integer",
					"minimum": 1,
					"default": 100
				},
				"in": "query",
				"name": "_count",
				"required": false,
				"description": "The maximum number of items that should appear per page or request."
			},
			"searchParam": {
				"schema": {
					"type": "string",
					"default": ""
				},
				"in": "query",
				"name": "_content",
				"required": false,
				"description": "A web-search formatted string to select specific entities returned."
			},
			"organizationParam": {
				"schema": {
					"type": "integer"
				},
				"in": "query",
				"name": "organization",
				"required": false,
				"description": "A reference (ID) to an existing organization entity."
			},
			"proposalParam": {
				"schema": {
					"type": "integer"
				},
				"in": "query",
				"name": "proposal",
				"required": false,
				"description": "A reference (ID) to an existing proposal entity."
			},
			"createdByParam": {
				"schema": {
					"oneOf": [
						{
							"type": "integer",
							"minimum": 1,
							"nullable": true
						},
						{
							"enum": ["me"]
						}
					]
				},
				"in": "query",
				"name": "createdBy",
				"required": false,
				"description": "A reference (ID) to a user entity, or 'me'."
			}
		},
		"securitySchemes": {
			"auth": {
				"type": "oauth2",
				"description": "The OAuth 2.0 (and OpenID Connect) Authorization Code flow.",
				"flows": {
					"authorizationCode": {
						"authorizationUrl": "https://example.com/protocol/openid-connect/auth",
						"tokenUrl": "https://example.com/protocol/openid-connect/token",
						"refreshUrl": "https://example.com/protocol/openid-connect/token",
						"scopes": {
							"openid": "Use OpenID Connect (recommended).",
							"roles": "Read your roles (recommended).",
							"profile": "Read your profile (recommended)."
						}
					}
				}
			}
		},
		"schemas": {
			"BulkUpload": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3407
					},
					"fileName": {
						"type": "string",
						"example": "upload.csv",
						"pattern": "^.+\\.csv$"
					},
					"fileSize": {
						"description": "File size in bytes",
						"type": "integer",
						"nullable": true,
						"readOnly": true,
						"example": 42,
						"minimum": 0
					},
					"sourceKey": {
						"type": "string",
						"example": "550e8400-e29b-41d4-a716-446655440000",
						"minLength": 1
					},
					"status": {
						"type": "string",
						"readOnly": true,
						"enum": [
							"pending",
							"in_progress",
							"completed",
							"failed",
							"canceled"
						]
					},
					"createdBy": {
						"description": "The id of the PDC user that created this bulk upload",
						"type": "integer",
						"readOnly": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": [
					"id",
					"fileName",
					"sourceKey",
					"status",
					"createdBy",
					"createdAt"
				]
			},
			"BulkUploadBundle": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Bundle"
					},
					{
						"type": "object",
						"properties": {
							"entries": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/BulkUpload"
								}
							}
						},
						"required": ["entries"]
					}
				]
			},
			"Organization": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3407
					},
					"taxId": {
						"type": "string",
						"example": "11-1111111"
					},
					"name": {
						"type": "string",
						"example": "Example Inc."
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": ["id", "taxId", "name", "createdAt"]
			},
			"OrganizationProposal": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true
					},
					"organizationId": {
						"type": "integer"
					},
					"organization": {
						"readOnly": true,
						"allOf": [
							{
								"$ref": "#/components/schemas/Organization"
							}
						]
					},
					"proposalId": {
						"type": "integer"
					},
					"proposal": {
						"readOnly": true,
						"allOf": [
							{
								"$ref": "#/components/schemas/Proposal"
							}
						]
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": [
					"id",
					"organizationId",
					"organization",
					"proposalId",
					"proposal",
					"createdAt"
				]
			},
			"PresignedPostRequest": {
				"type": "object",
				"properties": {
					"fileType": {
						"type": "string",
						"example": "application/octet-stream"
					},
					"fileSize": {
						"type": "integer",
						"minimum": 0,
						"example": 512
					},
					"presignedPost": {
						"readOnly": true,
						"allOf": [
							{
								"$ref": "#/components/schemas/PresignedPost"
							}
						]
					}
				},
				"required": ["fileType", "fileSize", "presignedPost"]
			},
			"PresignedPost": {
				"type": "object",
				"properties": {
					"url": {
						"type": "string"
					},
					"fields": {
						"type": "object",
						"properties": {
							"key": {
								"type": "string",
								"example": "96ddab90-1931-478d-8c02-a1dc80ae01e5"
							}
						},
						"required": ["key"]
					}
				},
				"required": ["url", "fields"]
			},
			"Proposal": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3709
					},
					"opportunityId": {
						"type": "integer",
						"example": 3203
					},
					"externalId": {
						"type": "string",
						"example": "AnIdGeneratedByAGms"
					},
					"versions": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProposalVersion"
						},
						"readOnly": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					},
					"createdBy": {
						"description": "The id of the PDC user that created this proposal",
						"type": "integer",
						"readOnly": true
					}
				},
				"required": [
					"id",
					"opportunityId",
					"externalId",
					"versions",
					"createdAt",
					"createdBy"
				]
			},
			"ProposalVersion": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3821
					},
					"proposalId": {
						"type": "integer",
						"example": 3709
					},
					"applicationFormId": {
						"type": "integer",
						"example": 3529
					},
					"version": {
						"type": "integer",
						"example": 17,
						"readOnly": true
					},
					"fieldValues": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ProposalFieldValue"
						}
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": [
					"id",
					"proposalId",
					"applicationFormId",
					"version",
					"fieldValues",
					"createdAt"
				]
			},
			"ProposalFieldValue": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3943
					},
					"proposalVersionId": {
						"type": "integer",
						"readOnly": true,
						"example": 3709
					},
					"applicationFormFieldId": {
						"type": "integer",
						"example": 3613
					},
					"applicationFormField": {
						"readOnly": true,
						"allOf": [
							{
								"$ref": "#/components/schemas/ApplicationFormField"
							}
						]
					},
					"position": {
						"type": "integer",
						"example": 23
					},
					"value": {
						"type": "string",
						"example": "Some arbitrary value"
					},
					"isValid": {
						"type": "boolean",
						"example": "true",
						"readOnly": true
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": [
					"id",
					"proposalVersionId",
					"applicationFormFieldId",
					"applicationFormField",
					"position",
					"value",
					"isValid",
					"createdAt"
				]
			},
			"ApplicationForm": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3529
					},
					"opportunityId": {
						"type": "integer",
						"example": 3203
					},
					"version": {
						"type": "integer",
						"readOnly": true,
						"example": 13
					},
					"fields": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/ApplicationFormField"
						}
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": ["id", "opportunityId", "version", "fields", "createdAt"]
			},
			"ApplicationFormField": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3613
					},
					"applicationFormId": {
						"type": "integer",
						"readOnly": true,
						"example": 3529
					},
					"baseFieldId": {
						"type": "integer",
						"example": 3011
					},
					"baseField": {
						"readOnly": true,
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseField"
							}
						]
					},
					"position": {
						"type": "integer",
						"example": 19
					},
					"label": {
						"type": "string",
						"example": "Your First Name"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": [
					"id",
					"applicationFormId",
					"baseFieldId",
					"baseField",
					"position",
					"label",
					"createdAt"
				]
			},
			"BaseField": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3011
					},
					"label": {
						"type": "string",
						"example": "First Name"
					},
					"description": {
						"type": "string",
						"example": "The first name of the applicant"
					},
					"shortCode": {
						"type": "string",
						"example": "firstName"
					},
					"dataType": {
						"type": "string",
						"enum": [
							"string",
							"number",
							"email",
							"phone_number",
							"url",
							"boolean"
						],
						"example": "string"
					},
					"scope": {
						"type": "string",
						"readOnly": true,
						"enum": ["proposal", "organization"]
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": [
					"id",
					"label",
					"description",
					"shortCode",
					"dataType",
					"scope",
					"createdAt"
				]
			},
			"PdcError": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"details": {
						"type": "array",
						"items": {}
					}
				}
			},
			"Opportunity": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3203
					},
					"title": {
						"type": "string",
						"example": "The Open Source Foundation 2022 Challenge"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": ["id", "title", "createdAt"]
			},
			"OpportunityBundle": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Bundle"
					},
					{
						"type": "object",
						"properties": {
							"entries": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Opportunity"
								}
							}
						},
						"required": ["entries"]
					}
				]
			},
			"PlatformProviderResponse": {
				"type": "object",
				"properties": {
					"externalId": {
						"type": "string",
						"example": "000000000"
					},
					"platformProvider": {
						"type": "string",
						"example": "DataPlatformProviderX"
					},
					"data": {
						"type": "object"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": ["externalId", "platformProvider", "data", "createdAt"]
			},
			"Bundle": {
				"type": "object",
				"properties": {
					"entries": {
						"type": "array",
						"items": {},
						"description": "The collection of requested resources."
					},
					"total": {
						"type": "integer",
						"description": "The total number of requested resources that exist in the database, across all pages.",
						"example": 20
					}
				},
				"required": ["entries", "total"]
			},
			"ApplicationFormBundle": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Bundle"
					},
					{
						"type": "object",
						"properties": {
							"entries": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/ApplicationForm"
								}
							}
						},
						"required": ["entries"]
					}
				]
			},
			"OrganizationBundle": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Bundle"
					},
					{
						"type": "object",
						"properties": {
							"entries": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Organization"
								}
							}
						},
						"required": ["entries"]
					}
				]
			},
			"OrganizationProposalBundle": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Bundle"
					},
					{
						"type": "object",
						"properties": {
							"entries": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/OrganizationProposal"
								}
							}
						},
						"required": ["entries"]
					}
				]
			},
			"ProposalBundle": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Bundle"
					},
					{
						"type": "object",
						"properties": {
							"entries": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/Proposal"
								}
							}
						},
						"required": ["entries"]
					}
				]
			},
			"User": {
				"type": "object",
				"properties": {
					"id": {
						"type": "integer",
						"readOnly": true,
						"example": 3407
					},
					"authenticationId": {
						"type": "string",
						"example": "foo@example.com"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"readOnly": true
					}
				},
				"required": ["id", "authenticationId", "createdAt"]
			},
			"UserBundle": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Bundle"
					},
					{
						"type": "object",
						"properties": {
							"entries": {
								"type": "array",
								"items": {
									"$ref": "#/components/schemas/User"
								}
							}
						},
						"required": ["entries"]
					}
				]
			}
		}
	},
	"paths": {
		"/applicationForms": {
			"get": {
				"operationId": "getApplicationForms",
				"summary": "Gets a list of application forms.",
				"tags": ["Application Forms"],
				"security": [
					{
						"auth": []
					}
				],
				"responses": {
					"200": {
						"description": "All application forms currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationFormBundle"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addApplicationForm",
				"summary": "Adds a new application form.",
				"tags": ["Application Forms"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ApplicationForm"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new application form that was created, with populated fields",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationForm"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"409": {
						"description": "There was a unique key conflict.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"422": {
						"description": "The application references entities that do not exist in the database.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/applicationForms/{applicationFormId}": {
			"get": {
				"operationId": "getApplicationFormById",
				"summary": "Gets a specific application form.",
				"tags": ["Application Forms"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "applicationFormId",
						"description": "The PDC-generated ID of an application form.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested application form.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApplicationForm"
								}
							}
						}
					}
				}
			}
		},
		"/bulkUploads": {
			"get": {
				"operationId": "getBulkUploads",
				"summary": "Gets a list of bulk uploads.",
				"tags": ["Bulk Uploads"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/createdByParam" }
				],
				"responses": {
					"200": {
						"description": "Requested bulk uploads registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BulkUploadBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addBulkUpload",
				"summary": "Registers a bulk upload.",
				"tags": ["Bulk Uploads"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BulkUpload"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The bulk upload",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BulkUpload"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/organizationProposals": {
			"get": {
				"operationId": "getOrganizationProposals",
				"summary": "Gets a list of OrganizationProposals.",
				"tags": ["Organization Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/organizationParam" },
					{ "$ref": "#/components/parameters/proposalParam" }
				],
				"responses": {
					"200": {
						"description": "The requested OrganizationProposals.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganizationProposalBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addOrganizationProposal",
				"summary": "Adds a new OrganizationProposal associated with a specific organization.",
				"tags": ["Organization Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/OrganizationProposal"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new OrganizationProposal",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganizationProposal"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/organizations": {
			"get": {
				"operationId": "getOrganizations",
				"summary": "Gets a list of organizations.",
				"tags": ["Organizations"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/proposalParam" }
				],
				"responses": {
					"200": {
						"description": "Organizations currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OrganizationBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addOrganization",
				"summary": "Adds a new organization.",
				"tags": ["Organizations"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Organization"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new organization that was created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Organization"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/organizations/{organizationId}": {
			"get": {
				"operationId": "getOrganizationById",
				"summary": "Gets a specific organization.",
				"tags": ["Organizations"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "organizationId",
						"description": "The PDC-generated ID of an organization.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The requested organization.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Organization"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/presignedPostRequests": {
			"post": {
				"operationId": "addPresignedPostRequest",
				"summary": "Requests a presigned post URL.",
				"tags": ["Presigned Posts"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PresignedPostRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The presigned post request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PresignedPostRequest"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/proposals": {
			"get": {
				"operationId": "getProposals",
				"summary": "Gets a list of proposals.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/searchParam" },
					{ "$ref": "#/components/parameters/organizationParam" },
					{ "$ref": "#/components/parameters/createdByParam" }
				],
				"responses": {
					"200": {
						"description": "A set of proposals currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProposalBundle"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addProposal",
				"summary": "Adds a new proposal.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Proposal"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new proposal that was created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Proposal"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"409": {
						"description": "There was a unique key conflict.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"422": {
						"description": "The proposal references entities that do not exist in the database.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/proposals/{proposalId}": {
			"get": {
				"operationId": "getProposalById",
				"summary": "Gets a specific proposal.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "proposalId",
						"description": "The PDC-generated ID of a proposal.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The proposal.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Proposal"
								}
							}
						}
					}
				}
			}
		},
		"/proposalVersions": {
			"post": {
				"operationId": "addProposalVersion",
				"summary": "Adds a new proposal version.",
				"tags": ["Proposals"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProposalVersion"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new proposal version that was created, with populated field values",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProposalVersion"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"422": {
						"description": "The proposal version references entities that do not exist in the database.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/baseFields": {
			"get": {
				"operationId": "getBaseFields",
				"summary": "Gets a list of base fields.",
				"tags": ["Base Fields"],
				"security": [
					{
						"auth": []
					}
				],
				"responses": {
					"200": {
						"description": "All base fields currently registered in the PDC.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/BaseField"
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addBaseField",
				"summary": "Adds a new base field.",
				"tags": ["Base Fields"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BaseField"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new base field that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseField"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"409": {
						"description": "There was a unique key conflict.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/baseFields/{baseFieldId}": {
			"put": {
				"operationId": "updateBaseFieldById",
				"summary": "Updates a base field.",
				"tags": ["Base Fields"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "baseFieldId",
						"description": "The PDC-generated ID of a base field.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BaseField"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The updated base field.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseField"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"404": {
						"description": "The base field could not be found."
					}
				}
			}
		},
		"/opportunities": {
			"get": {
				"operationId": "getOpportunities",
				"summary": "Gets a list of opportunities.",
				"tags": ["Opportunities"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" }
				],
				"responses": {
					"200": {
						"description": "A list of known funding opportunities.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OpportunityBundle"
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addOpportunity",
				"summary": "Adds a new opportunity.",
				"tags": ["Opportunities"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Opportunity"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new opportunity that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Opportunity"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/opportunities/{opportunityId}": {
			"get": {
				"operationId": "getOpportunityById",
				"summary": "Gets a specific opportunity.",
				"tags": ["Opportunities"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "opportunityId",
						"description": "The PDC-generated ID of an opportunity, RFC, potential award or grant, etc.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The funding opportunity.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Opportunity"
								}
							}
						}
					}
				}
			}
		},
		"/platformProviderResponses": {
			"get": {
				"operationId": "getPlatformProviderResponses",
				"summary": "Gets a list of platform provider responses.",
				"tags": ["Internal Use Only"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{
						"name": "externalId",
						"description": "The external ID that has been associated with the response.  This ID is arbitrarily formatted, and cannot be predicted without knowledge of specific PDC data.",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "A list of cached platform provider responses.",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/PlatformProviderResponse"
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "addPlatformProviderResponse",
				"summary": "Adds a new platform provider response.",
				"tags": ["Internal Use Only"],
				"security": [
					{
						"auth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PlatformProviderResponse"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The new platform provider response that was created.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PlatformProviderResponse"
								}
							}
						}
					},
					"400": {
						"description": "Required fields were not provided or were incorrectly formatted.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					},
					"401": {
						"description": "Authentication was not provided or was invalid.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PdcError"
								}
							}
						}
					}
				}
			}
		},
		"/users": {
			"get": {
				"operationId": "getUsers",
				"summary": "Gets a list of users.",
				"tags": ["Users"],
				"security": [
					{
						"auth": []
					}
				],
				"parameters": [
					{ "$ref": "#/components/parameters/pageParam" },
					{ "$ref": "#/components/parameters/countParam" },
					{ "$ref": "#/components/parameters/authenticationIdParam" }
				],
				"responses": {
					"200": {
						"description": "A list of users.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserBundle"
								}
							}
						}
					}
				}
			}
		}
	}
}
